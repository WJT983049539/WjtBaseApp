package com.ping.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.privatee.wjtbaseapp.Bean.TwoListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TWO_LIST_BEAN".
*/
public class TwoListBeanDao extends AbstractDao<TwoListBean, Void> {

    public static final String TABLENAME = "TWO_LIST_BEAN";

    /**
     * Properties of entity TwoListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Value = new Property(0, int.class, "value", false, "VALUE");
        public final static Property Lastname = new Property(1, String.class, "lastname", false, "LASTNAME");
    }


    public TwoListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TwoListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TWO_LIST_BEAN\" (" + //
                "\"VALUE\" INTEGER NOT NULL ," + // 0: value
                "\"LASTNAME\" TEXT);"); // 1: lastname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TWO_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TwoListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getValue());
 
        String lastname = entity.getLastname();
        if (lastname != null) {
            stmt.bindString(2, lastname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TwoListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getValue());
 
        String lastname = entity.getLastname();
        if (lastname != null) {
            stmt.bindString(2, lastname);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TwoListBean readEntity(Cursor cursor, int offset) {
        TwoListBean entity = new TwoListBean( //
            cursor.getInt(offset + 0), // value
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // lastname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TwoListBean entity, int offset) {
        entity.setValue(cursor.getInt(offset + 0));
        entity.setLastname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TwoListBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TwoListBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(TwoListBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
